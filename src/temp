diff --git a/src/StaticGenerator.php b/src/StaticGenerator.php
index eb58002..916cd75 100755
--- a/src/StaticGenerator.php
+++ b/src/StaticGenerator.php
@@ -270,6 +270,7 @@ class StaticGenerator {
           $count_gen++;
         }
 
+
         // Exit if single run for specified content type.
         if (!empty($type)) {
           break;
@@ -628,8 +629,7 @@ class StaticGenerator {
    *
    * @return bool
    */
-  function startsWith($haystack, $needle)
-  {
+  function startsWith($haystack, $needle) {
     $length = strlen($needle);
     return (substr($haystack, 0, $length) === $needle);
   }
@@ -1085,12 +1085,12 @@ class StaticGenerator {
       $block->parentNode->replaceChild($esi_element, $block);
 
       // Generate the ESI fragment file.
-      if (!$blocks_over_write && in_array($block_id, $blocks_processed)) {
+      if (in_array($block_id, $blocks_processed)) {
         // Return if block has been processed.
         continue;
       }
       else {
-        $this->generateEsiFileByElement($esi_filename, $block, 'block', $blocks_over_write);
+        $this->generateEsiFileByElement($esi_filename, $block, 'block');
         $blocks_processed[] = $block_id;
       }
     }
@@ -1102,18 +1102,23 @@ class StaticGenerator {
 
       // Get esi class.
       $classes = $element->getAttribute('class');
-      if (strpos($classes, 'sg-esi---') > 0) {
-        continue;
-      }
 
       $classes_array = explode(' ', $classes);
       $esi_id = '';
-      foreach($classes_array as $esi_class) {
+      foreach ($classes_array as $esi_class) {
+        if ($this->startsWith($esi_class, 'sg-esi---')) {
+          continue;
+        }
         if ($this->startsWith($esi_class, 'sg-esi--')) {
           $esi_id = substr($esi_class, 8);
         }
       }
 
+      // Must have an sg esi id.
+      if (empty($esi_id)) {
+        continue;
+      }
+
       // Get ESI filename.
       if (array_key_exists($esi_id, $sg_esi_processed)) {
         $esi_filename = $sg_esi_processed[$esi_id];
@@ -1138,12 +1143,12 @@ class StaticGenerator {
       $element->parentNode->replaceChild($esi_element, $element);
 
       // Generate the ESI fragment file.
-      if (!$blocks_over_write && array_key_exists($esi_id, $sg_esi_processed)) {
+      if (array_key_exists($esi_id, $sg_esi_processed)) {
         // Return if esi_id has been processed.
         continue;
       }
       else {
-        $this->generateEsiFileByElement($esi_filename, $element, 'sg-esi', $blocks_over_write);
+        $this->generateEsiFileByElement($esi_filename, $element, 'sg-esi');
         $sg_esi_processed[$esi_id] = $esi_filename;
       }
     }
@@ -1163,19 +1168,16 @@ class StaticGenerator {
    *   The filename for the generated ESI file.
    *
    * @param $element
+   * The dom element getting ESI.
+   *
    * @param $directory
-   * @param bool $over_write
+   * The target directory (/esi/<directory>)
    */
-  public function generateEsiFileByElement($esi_filename, $element, $directory, $over_write = FALSE) {
+  public function generateEsiFileByElement($esi_filename, $element, $directory) {
 
     // Return if fragment file already exists and not over writing.
     $directory = $this->generatorDirectory() . '/esi/' . $directory;
     file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
-    if (!$over_write) {
-      if (file_scan_directory($directory, '/^' . $esi_filename . '$/')) {
-        return;
-      }
-    }
 
     // Generate esi fragment file.
     $markup = $element->ownerDocument->saveHTML($element);
@@ -1327,7 +1329,7 @@ class StaticGenerator {
     // Delete Blocks
     $dir = $this->generatorDirectory(TRUE) . '/esi/block';
 
-    // Delete block esi include files and the block directory.
+    // Delete ESIs include files and the esi directory.
     $esi_files = file_scan_directory($dir, '/.*/', ['recurse' => TRUE]);
     foreach ($esi_files as $block_esi_file) {
       file_unmanaged_delete_recursive($block_esi_file->uri, $callback = NULL);
@@ -1344,6 +1346,10 @@ class StaticGenerator {
     }
     file_unmanaged_delete_recursive($dir, $callback = NULL);
 
+    // Delete /esi directory.
+    $dir = $this->generatorDirectory(TRUE) . '/esi';
+    file_unmanaged_delete_recursive($dir, $callback = NULL);
+
     // Elapsed time.
     $end_time = time();
     $elapsed_time = $end_time - $start_time;
