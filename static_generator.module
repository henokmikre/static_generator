<?php

/**
 * @file
 * Generates a static version of a Drupal site.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function static_generator_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.static_generator':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Static Generator module generates a static version of a Drupal site. For more information, see the <a href=":static_generator-documentation">online documentation for the Static Generator module</a>.', [':static_generator-documentation' => 'https://www.drupal.org/documentation/modules/static_generator']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating a read only "brochure" site.') . '</dt>';
      $output .= '<dd>' . t('Creating a hybrid static/dynamic site') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function static_generator_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  //$build['#cache']['max-age'] = -1;
}

/**
 * Implements hook_entity_update().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function static_generator_entity_update(EntityInterface $entity) {

  if (empty($entity->get('moderation_state'))) {
    return;
  }

  // Pages.
  if ($entity->getEntityTypeId() === 'node') {
    $path = $entity->toUrl()->toString();
    if ($entity->get('moderation_state')->value == 'published') {
      \Drupal::service('static_generator')->generatePage($path, TRUE);
    }
    elseif ($entity->get('moderation_state')->value == 'archived') {
      \Drupal::service('static_generator')->deletePage($path);
    }
  }

  // Blocks.
  /*if ($entity->getEntityTypeId() === 'block') {
    // @todo not sure if we need to handle this.
    $block_id = $entity->toUrl()->toString();
    if ($entity->get('moderation_state')->value == 'published') {
      if (in_array($block_id, \Drupal\static_generator\StaticGenerator::BLOCK_IDS_ESI)) {
        \Drupal::service('static_generator')->generateBlock($block_id, $generate_blocks);
      }
    }
    elseif ($entity->get('moderation_state')->value == 'archived') {
      // @todo Not sure if block can be archived.
      \Drupal::service('static_generator')->deleteBlock($block_id);
    }
  }*/

}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function static_generator_entity_delete(EntityInterface $entity) {
  // Content entities only.
  if (!($entity->getEntityTypeId() === 'node')) {
    return;
  }
  else {
    $path = $entity->toUrl()->toString();
    \Drupal::service('static_generator')->deletePage($path);
  }
}


// as seen in the content_moderation_notifications.
// Implementing these hooks gives you a single place to react to content states changes.

